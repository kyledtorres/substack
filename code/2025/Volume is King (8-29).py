# -*- coding: utf-8 -*-
"""RB Volume.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16YxsMytdBZkjnkWILG7QN0RTRTBptV1C

# Set-up
"""

!pip install great_tables   # for styling tables

import pandas as pd
import numpy as np
import os   # for looping through local directory

import plotly.express as px
import matplotlib.pyplot as plt   # for creating plots with axes
import matplotlib.image as mpimg  # for adding images to plots
from matplotlib.offsetbox import OffsetImage, AnnotationBbox

import great_tables as gt
from great_tables import GT, style, loc

# connect to Google Drive
from google.colab import drive
drive.mount('/content/drive')

"""# Data Preparation

Data from [Pro Football Reference 2024 NFL Fantasy Ranks](https://www.pro-football-reference.com/years/2024/fantasy.htm)
"""

# load in fantasy df from Google Drive
fantasy_data = pd.read_csv("/content/drive/MyDrive/Fantasy Football/Data/Pro football reference/2024/pfr_fantasy_data_2024.csv")

# filter out RBs
fantasy_rb_data = fantasy_data[fantasy_data["FantPos"] == "RB"]

# keep relevant columns
fantasy_rb_data = fantasy_rb_data[["Player", "Rush_Att", "Tgt", "FDPt"]]

# convert column values to be integers (easier to see)
fantasy_rb_data[["Rush_Att", "Tgt"]] = fantasy_rb_data[["Rush_Att", "Tgt"]].astype(int)

# create new "Opp" (opportunities) column by adding values from "Rush_Att" and "Tgt" columns
fantasy_rb_data["Opp"] = fantasy_rb_data["Rush_Att"] + fantasy_rb_data["Tgt"]

# create new "Adj_Opp" (adjusted opportunities) where targets are worth 1.5 times more than a rush attempt
fantasy_rb_data["Adj_Opp"] = fantasy_rb_data["Rush_Att"] + fantasy_rb_data["Tgt"]*1.5

# filter df to only include RBs with more than 100 opportunities
fantasy_rb_data = fantasy_rb_data[fantasy_rb_data["Opp"] >= 100]

# display first 10 rows of df
fantasy_rb_data.head(10)

"""Data from [Pro Football Reference 2024 NFL Redzone Rushing Statistics](https://www.pro-football-reference.com/years/2024/redzone-rushing.htm)"""

rz_rushing_data = pd.read_csv("/content/drive/MyDrive/Fantasy Football/Data/Pro football reference/2024/pfr_rz_rushing_data_2024.csv")

# only include relevant columns
rz_rushing_data = rz_rushing_data[["Player", "Att_ins_5"]]

# replace specific names to match other df
rz_rushing_data["Player"] = rz_rushing_data["Player"].replace({"Tyrone Tracy": "Tyrone Tracy Jr.", "Brian Robinson": "Brian Robinson Jr.", "Kenneth Walker": "Kenneth Walker III"})

# display top 10 rows
rz_rushing_data.head(10)

# create new df by merging fantasy data and redzone rushing data (only includes the top 40 players)
rb_volume_data = pd.merge(fantasy_rb_data, rz_rushing_data, on="Player", how="left")
rb_volume_data = rb_volume_data[["Player", "Opp", "Adj_Opp", "Att_ins_5", "FDPt"]]
rb_volume_data["Rank"] = rb_volume_data["FDPt"].rank(ascending=False, method="min").astype(int)
rb_volume_data = rb_volume_data.sort_values("FDPt", ascending=False).head(40)

# creating new "Tier" column based on fantasy points scored last season (intervals of 10)
tiers = [
    rb_volume_data["Rank"] <= 10,
    (rb_volume_data["Rank"] > 10) & (rb_volume_data["Rank"] <= 20),
    (rb_volume_data["Rank"] > 20) & (rb_volume_data["Rank"] <= 30),
    rb_volume_data["Rank"] > 30
]
choices = [1, 2, 3, 4]

rb_volume_data["Tier"] = np.select(tiers, choices)
rb_volume_data["Tier"] = rb_volume_data["Tier"].astype("category")

# adding image column that contains headshot paths (for plotting with plt)
img_path = "/content/drive/MyDrive/Substack/NFL images/RB"
rb_volume_data["Image"] = rb_volume_data["Player"].apply(lambda name: os.path.join(img_path, f"{name}.png"))  # individual image paths created by concatenating path with player name
rb_volume_data["Image"] = rb_volume_data["Image"].apply(lambda path: path if os.path.exists(path) else None)  # if path not found (image not in directory), label value as None

# display top 15
rb_volume_data.head(15)

"""# Creating an interactive scatterplot (NOT USED)"""

hover_cols = {"Player": True,
              "Rank": True,
              "Opp": False,
              "Adj_Opp": False,
              "Att_ins_5": False,
              "FDPt": False,
              "Tier": False
              }

fig = px.scatter(
    data_frame=rb_volume_data,
    x="Att_ins_5",
    y="Adj_Opp",
    size="FDPt",
    color="Tier",
    hover_data=hover_cols,
    # trendline="ols"
)

# # Add horizontal line at y=340
# fig.add_hline(y=340, line_dash="dash", line_color="black")

# # Add vertical line at x=13
# fig.add_vline(x=13, line_dash="dash", line_color="black")

fig.show()

"""# Creating Cool Scatterplots

## Simple Scatterplot
"""

# colors for each tier
tier_colors = {
    1: "green",
    2: "blue",
    3: "orange",
    4: "red"
}

# scatter plot
fig, ax = plt.subplots(figsize=(12, 6))

# loop through rows
for _, row in rb_volume_data.iterrows():
    color = tier_colors.get(row["Tier"], "gray")
    ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")

# handle legend (avoid duplicates)
handles, labels = ax.get_legend_handles_labels()
by_label = dict(zip(labels, handles))
ax.legend(by_label.values(), by_label.keys(),
          title="Tiers", loc="center left", bbox_to_anchor=(1.02, 0.5))


# axes formatting
ax.set_xlim(0, 20)
ax.set_ylim(100, 450)
ax.set_xlabel("Rush Attempts Inside 5-Yd Line")
ax.set_ylabel("Adjusted Opportunities")
ax.set_title("RB Volume")
ax.grid(True, alpha=0.3, zorder=0)

# remove outer border
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.savefig('/content/drive/MyDrive/Substack/8.29/RB_Volume_Tiers.png', dpi=300)

plt.show()

"""## Scatterplot with Tier 1 RBs Visualized"""

# scatter plot
fig, ax = plt.subplots(figsize=(12, 6))

# loop through rows
for _, row in rb_volume_data.iterrows():
    color = tier_colors.get(row["Tier"], "gray")

    if row["Tier"] == 1 and row["Image"] is not None:
        try:
            # plot image for Tier 1
            img = mpimg.imread(row["Image"])
            ab = AnnotationBbox(
                OffsetImage(img, zoom=0.17),
                (row["Att_ins_5"], row["Adj_Opp"]),
                frameon=False
            )
            ax.add_artist(ab)
        except FileNotFoundError:
            # fallback to colored dot if image is missing
            ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")
    else:
        # plot regular colored dot for non-Tier 1 players
        ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")

# legend
handles, labels = ax.get_legend_handles_labels()
by_label = dict(zip(labels, handles))
ax.legend(by_label.values(), by_label.keys(),
          title="Tiers", loc="center left", bbox_to_anchor=(1.02, 0.5))

# axes formatting
ax.set_xlim(0, 20)
ax.set_ylim(100, 450)
ax.set_xticks(range(0, 21, 2))
ax.set_xlabel("Rush Attempts Inside 5-Yd Line")
ax.set_ylabel("Adjusted Opportunities")
ax.set_title("RB Volume")
ax.grid(True, alpha=0.3, zorder=0)

# remove outer border
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.savefig('/content/drive/MyDrive/Substack/8.29/RB_Volume_Tier_1.png', dpi=300)

plt.show()

"""## Risers Scatterplot"""

risers = ["Bucky Irving", "Chase Brown", "Tony Pollard"]

fig, ax = plt.subplots(figsize=(12, 6))

for _, row in rb_volume_data.iterrows():
    color = tier_colors.get(row["Tier"], "gray")

    if row["Player"] in risers and row["Image"] is not None:
        try:
            # plot image for risers
            img = mpimg.imread(row["Image"])
            ab = AnnotationBbox(
                OffsetImage(img, zoom=0.17),
                (row["Att_ins_5"], row["Adj_Opp"]),
                frameon=False
            )
            ax.add_artist(ab)
        except FileNotFoundError:
            # fallback to colored dot if image is missing
            ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")
    else:
        # plot regular colored dot for non-riser players
        ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")

handles, labels = ax.get_legend_handles_labels()
by_label = dict(zip(labels, handles))
ax.legend(by_label.values(), by_label.keys(),
          title="Tiers", loc="center left", bbox_to_anchor=(1.02, 0.5))

ax.set_xlim(0, 20)
ax.set_ylim(100, 450)
ax.set_xticks(range(0, 21, 2))
ax.set_xlabel("Rush Attempts Inside 5-Yd Line")
ax.set_ylabel("Adjusted Opportunities")
ax.set_title("Potential RB Risers")
ax.grid(True, alpha=0.3, zorder=0)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.savefig('/content/drive/MyDrive/Substack/8.29/RB_Volume_Risers.png', dpi=300)

plt.show()

"""## Fallers Scatterplot"""

fallers = ["Chuba Hubbard", "James Cook", "Aaron Jones"]

fig, ax = plt.subplots(figsize=(12, 6))

for _, row in rb_volume_data.iterrows():
    color = tier_colors.get(row["Tier"], "gray")

    if row["Player"] in fallers and row["Image"] is not None:
        try:
            # Plot image for fallers
            img = mpimg.imread(row["Image"])
            ab = AnnotationBbox(
                OffsetImage(img, zoom=0.17),
                (row["Att_ins_5"], row["Adj_Opp"]),
                frameon=False
            )
            ax.add_artist(ab)
        except FileNotFoundError:
            # fallback to colored dot if image is missing
            ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")
    else:
        # Plot regular colored dot for non-fallers players
        ax.scatter(row["Att_ins_5"], row["Adj_Opp"], color=color, s=80, label=f"Tier {row['Tier']}")

handles, labels = ax.get_legend_handles_labels()
by_label = dict(zip(labels, handles))
ax.legend(by_label.values(), by_label.keys(),
          title="Tiers", loc="center left", bbox_to_anchor=(1.02, 0.5))

ax.set_xlim(0, 20)
ax.set_ylim(100, 450)
ax.set_xticks(range(0, 21, 2))
ax.set_xlabel("Rush Attempts Inside 5-Yd Line")
ax.set_ylabel("Adjusted Opportunities")
ax.set_title("Potential RB Fallers")
ax.grid(True, alpha=0.3, zorder=0)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.savefig('/content/drive/MyDrive/Substack/8.29/RB_Volume_Fallers.png', dpi=300)

plt.show()

"""# Riser/Faller ADP Comparison

Data from [FantasyPros ADP tracker](https://www.fantasypros.com/nfl/adp/half-point-ppr-overall.php)
"""

# list of risers and fallers
risers_fallers = ["Bucky Irving", "Chase Brown", "Tony Pollard", "Chuba Hubbard", "James Cook", "Aaron Jones"]

# load and clean ADP df
rb_adp = pd.read_csv("/content/drive/MyDrive/Substack/8.29/FP_2025_RB_ADP_Rankings.csv")
rb_adp = rb_adp.drop(columns=["Real-Time (?)", "Overall", "Bye"])
rb_adp["Player"] = rb_adp["Player"].replace({"Aaron Jones Sr.": "Aaron Jones"})
riser_faller_adp = rb_adp[rb_adp["Player"].isin(risers_fallers)].copy()
riser_faller_adp[["RB", "Yahoo", "Sleeper", "RTSports"]] = riser_faller_adp[["RB", "Yahoo", "Sleeper", "RTSports"]] .astype(int)
riser_faller_adp

# filter player name and last season's finish
riser_faller_ranks = rb_volume_data[rb_volume_data["Player"].isin(risers_fallers)].copy()
riser_faller_ranks = riser_faller_ranks[["Player", "Rank"]]
riser_faller_ranks

# create new df by merging ADP data and last year's finish data
riser_faller_adp_comparison = pd.merge(riser_faller_adp, riser_faller_ranks, on="Player", how="inner")
riser_faller_adp_comparison["Player Name"] = riser_faller_adp_comparison["Player"]

# create new column that calculates expected change in draft finish
riser_faller_adp_comparison["Change"] = riser_faller_adp_comparison["Rank"] - riser_faller_adp_comparison["RB"]
riser_faller_adp_comparison = riser_faller_adp_comparison[["Team", "Player Name", "Player", "Rank", "RB", "Change"]]
riser_faller_adp_comparison

"""## Riser/Faller Table

Logos from https://www.sportslogos.net/ <br>
Headshots from https://www.espn.com/

[Table formatting reference](https://posit-dev.github.io/great-tables/reference/)
"""

table = (
    GT(riser_faller_adp_comparison)
    .tab_header(
        title=gt.md("**Risers and Fallers**"),
        subtitle="Potential RB Risers and Fallers based on change in expected volume"
    )

    # center values for the following columns
    .cols_align(columns=["Team", "Rank", "RB", "Change"], align="center")

    # rename columns
    .cols_label(**{
        "Team": "",
        "Player Name": "",
        "Player": "Player",
        "Rank": "2024 Finish",
        "RB": "2025 ADP"
    })

    # add team logos
    .fmt_image(
        columns="Team",
        path="/content/drive/MyDrive/Substack/NFL images/Logos",
        file_pattern="{}.png"
    )

    # add player headshots
    .fmt_image(
        columns="Player Name",
        path="/content/drive/MyDrive/Substack/NFL images/RB",
        file_pattern="{}.png",
        height="60px",
        width="80px"
    )

    # add color gradient to "Change" column (red=faller, green=riser)
    .data_color(
        columns = "Change",
        domain=[-12, 6],  # range of values to be colored
        palette=["#9A1445", "#ECEFF1FF", "#149a6a"],
        na_color="white",
    )
    # .tab_style(style=style.text(color="green", weight="bold"),locations=loc.body(columns="RB", rows=[0,1]))
    # .tab_style(style=style.text(color="#d12e45", weight="bold"),locations=loc.body(columns="RB", rows=[2,3,4,5,6]))
)

table